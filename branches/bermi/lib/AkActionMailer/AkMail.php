<?php
/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

// +----------------------------------------------------------------------+
// | Akelos Framework - http://www.akelos.org                             |
// +----------------------------------------------------------------------+
// | Copyright (c) 2002-2006, Akelos Media, S.L.  & Bermi Ferrer Martinez |
// | Released under the GNU Lesser General Public License, see LICENSE.txt|
// +----------------------------------------------------------------------+

/**
 * @package AkelosFramework
 * @subpackage AkActionMailer
 * @author Bermi Ferrer <bermi a.t akelos c.om>
 * @copyright Copyright (c) 2002-2006, Akelos Media, S.L. http://www.akelos.org
 * @license GNU Lesser General Public License <http://www.gnu.org/copyleft/lesser.html>
 */

require_once(AK_LIB_DIR.DS.'AkActionMailer'.DS.'AkMailEncoding.php');

class AkMail extends AkObject
{
    /**
     * These are the most common headers that will be set as attributes of this 
     * AkMail instance. The keys match the ones generated by PEAR's mimeDecode
     */
    var $_commonHeaders = array(
    'from'=>'from',
    'to' => 'to',
    'cc' => 'cc',
    'bcc' => 'bcc',
    'subject' => 'subject',
    'date' => 'date',
    'content-transfer-encoding' => 'contentTransferEncoding',
    'content-type' => 'contentType',
    'mime-version' => 'mimeVersion',
    'message-id' => 'messageId',
    'return-path' => 'returnPath',
    'received' => 'received'
    );
    var $rawMessage = '';
    
    function __construct()
    {
        $args = func_get_args();
        if(isset($args[0])){
            if(count($args) == 1 && is_string($args[0])){
                $this->rawMessage = $args[0];
            }elseif(is_array($args[0])){
                $this->_importStructure($args[0]);
            }
        }
    }
    
    function parse($raw_email)
    {
        $Parser =& new AkMailEncoding($raw_email);
        return new AkMail((array)$Parser->decode());
    }
    
    function setBody($body)
    {
        $this->body = $body;    
    }
    
    function setHeaders($headers)
    {
        $this->headers = $headers;    
    }
    
    function setContentType($content_type)
    {
        $this->content_type = $content_type;    
    }
    
    function _importStructure($structure = array())
    {
        empty($structure['headers']) ? null : $this->setHeaders($structure['headers'], array('decode'=>false));
        empty($structure['body']) ? null : $this->setBody($structure['body'], array('decode'=>false));
        $this->setContentType($structure['ctype_primary'].'/'.$structure['ctype_secondary']);
        $this->_propagateComonHeaders();
    }
    
    function _propagateComonHeaders()
    {
        foreach ($this->_commonHeaders as $header_key=>$attribute_name){
            if(isset($this->headers[$header_key])){
                $this->$attribute_name = $this->headers[$header_key];
                unset($this->headers[$header_key]);
            }
        }
    }
}

?>
