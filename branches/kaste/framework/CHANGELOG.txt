SVN
----------------------
* Datatypes for PostgreSQL changed. You need to update/change your table schemas! Run migrations!
  Before this, we kinda hacked Mysql-behavior into PostgreSQL. Thus we didnt used features of Postgre on one side.
  In the long run we had to fix - better now than later - since the design problems only "multiply" when time goes by. 
  At this point we wanted to implement the decimal/numeric datatype. And so we had to decide whether to hack further or
  to solve the underlying issue. This means we HAD to correct a wrong implementation. 
  
     (simplified type>) Akelos      Postgre (<Actual Type)
  Until now we had:     boolean  => numeric(1)
                        integer  => numeric(X,0)
                      
  From now on we have:  boolean  => bool
                        integer  => integer  (int4)
                        decimal  => numeric
                                  
  To guide you through this we'll have a test at test/unit/lib/AkActiveRecord/_PostgreSQL_datatype_migration.php.
  First make you comfortably with this test and make it pass. This is a test against a dummy-table of course. (When you're
  on Postgre 7 you have to modify this test. But you'll see that.) 
  Next write appropriate migrations/installers for your real tables. (Again: You should always begin with a test.)
  
  Keep in mind that we typecast TINYINT as boolean on MySQL. So you cannot use tinyint for other things.                                             
  
* Boolean columns now actually have three possible states: true, false and null. Before that null=>false!

* AkInstaller::createTable() will now add created_at and updated_at columns automatically unless you have one of 
  them in your table declaration or set the option 'timestamp' => false
    
    function up_1(){
        $this->createTable('user', 'id, first_name, last_name, email'); // will add created_at, and updated_at
    }

  to avoid it

    function up_1(){
          $this->createTable('user', 'id, first_name, last_name, email', array('timestamp'=>false)); // nothing extra
    }   
  
  or
  
    function up_1(){
          $this->createTable('user', 'id, first_name, last_name, email, updated_at'); // nothing extra
    }   
      
* Simplifying unit test calls for models and core tests. Updated generators to reflect this new way of calling tests.
  If you stick with the convention of prefixing your test cases with TestCase you will no longer need to call ak__test('testcaseclass')
  
  Running models test can now be done with simply
    ./script/test model User
    
  Core tests can be called without the full path like
    ./script/test AkActiveRecord

* Rearranged scripts to include as little code as possible in the application space. This should make updates easier.

* Removed AkInflector::modulize as it had a misleading name, use AkInflector::classify instead [420]

* Added support for HTTP Authentication [412]. Example:

    <?php
    
    class PostController extends ApplicationController
    {
        var $_authorized_users = array('bermi' => 'secret');
        
        function __construct()
        {
            $this->beforeFilter(array('authenticate' => array('except' => array('index'))));
        }
    
        function index() 
        {
            $this->renderText("Everyone can see me!");
        }
    
        function edit()
        {
            $this->renderText("I'm only accessible if you know the password");
        }
    
        function authenticate()
        {
            /**
            * You can either use an array like $this->_authorized_users or
            * an Model instance that implements an authenticate method like Model::authenticate($user,$pass, $controller);
            */
            return $this->_authenticateOrRequestWithHttpBasic('My Blog', $this->_authorized_users);
        }
    }
    
    ?>

* Added public/500.php and public/404.php for handling errors on production mode.


0.8
----------------------

 * First public release