<?xml version="1.0"?>
<project name="LP2 Build File For Unit Tests" basedir="." default="build">

	<property file="default.build.properties" override="true"/>

	<property name="report.dir" value="${project.basedir}/test/report" />
	<property name="test.dir" value="${project.basedir}/ci-tests" />
	<property name="config.dir" value="${project.basedir}/script/extras" />
	<property name="config.file" value="${config.dir}/ci-config.yaml" />
	<fileset dir="lib" id="akelos-classes">
		<include name="*/**/*.php" />
	</fileset>

	<target name="taskdef">
		<taskdef name="ci-tests" classname="CiTestsTask" classpath="${project.basedir}" />
		<taskdef name="ci-reports" classname="CiReportTask" classpath="${project.basedir}" />
		<taskdef name="ci-rewrite-url" classname="CiRewriteUrlTask" classpath="${project.basedir}" />
	</target>
    <target name="interactive-config">
    	<property file="build.properties" override="true"/>
	<echo>
	            params:
	            all
	            
	            run all unit tests in any combination.
	            
	            params:
	            php5 postgres mysql AkHasMany AkBelongsTo
	            
	            run AkHasMany and AkBelongsTo on PHP5 using the postgres and mysql-db.
	        </echo>
	        <propertyprompt propertyname="akelos_path" promptText="Please provide the akelos path containing the version you want to test" promptCharacter=":" defaultValue="${akelos_path}" />
	        <propertyprompt propertyname="test_dir" promptText="Please provide the directory the test app should be installed in" promptCharacter=":" defaultValue="${test_dir}" />
	        <propertyprompt propertyname="arguments" promptText="Please provide run arguments. No arguments will run all valid combinations" promptCharacter=":" defaultValue="${arguments}" />
    	<copy file="TPL-build.properties" tofile="build.properties" overwrite="true">
    	            <filterchain>
    	                <expandproperties />
    	            </filterchain>
    	        </copy>
    	
	</target>
	<target name="interactive" depends="taskdef,check-config, interactive-config">
		
		<phingCall target="run-tests">
			<param name="akelos_path" value="${akelos_path}" />
			<param name="test_dir" value="${test_dir}" />
			<param name="arguments" value="${arguments}" />
		</phingCall>
	</target>
	<target name="validate-akelos">
		<available file="${akelos_path}/akelos" property="akelos_available" />
		<fail unless="akelos_available" message="akelos could not be found in ${akelos_path}" />
	</target>

	<target name="run-tests">
		<property file="build.properties" override="true"/>
		<phingCall target="validate-akelos" />
		<ci-tests akelosPath="${akelos_path}" testDir="${test_dir}" args="${arguments}" />
		<phingCall target="generate-reports">
			<param name="test.dir" value="${test_dir}" />
		</phingCall>
	</target>
	<target name="generate-reports">
		<ci-reports styledir="resources/xsl" reportdir="${report.dir}" format="noframes">
			<fileset dir="${test.dir}">
				<include name="test-results*.xml" />
			</fileset>

		</ci-reports>
	</target>
		
	<target name="check-config">
		<echo>Checking configuration</echo>
		<available file="${config.file}" property="config.exists" value="1" />
		<if>
			<equals arg1="${config.exists}" arg2="1" />
			<then>
				<echo>${config.file} exists</echo>
			</then>
			<else>
				<echo>${config.file} does not exist</echo>
				<phingCall target="generate-config" />

			</else>
		</if>
		<available file="build.properties" property="build.props" value="1" />
		        <if>
		            <equals arg1="${build.props}" arg2="1" />
		            <then>
		                <echo>build.properties exists</echo>
		            </then>
		            <else>
		                <phingCall target="interactive-config" />

		            </else>
		        </if>
        <phingCall target="generate-caching-config" />
        <phingCall target="generate-sessions-config" />
		
	</target>
	
	<target name="setup" depends="taskdef,generate-config"/>
	<target name="generate-config">
		<echo>Generating config</echo>
		<input propertyname="testing.url" message="[WebServer] Please provide the url under which the testing website can be found" promptChar=":" defaultValue="http://localhost/test/fixtures/public" />
		<phingCall target="generate-config-mysql">
			<param name="testing.url" value="${testing.url}" />
		</phingCall>
		<phingCall target="generate-config-postgres">
			<param name="testing.url" value="${testing.url}" />
		</phingCall>
		<phingCall target="generate-config-sqlite">
			<param name="testing.url" value="${testing.url}" />
		</phingCall>
		<phingCall target="generate-yaml-config-file" />
		<phingCall target="generate-fix-htaccess" />

	</target>
	<target name="generate-caching-config">
	<available file="${config.dir}/caching.yml" property="caching.config.exists"/>
		<if>
		<equals arg1="${caching.config.exists}" arg2="true"/>
			<then>
				<echo>${config.dir}/caching.yml exists</echo>
			</then>
			<else>
				<copy file="${config.dir}/DEFAULT-caching.yml" tofile="${config.dir}/caching.yml"/>
			</else>
		</if>
	</target>
	<target name="generate-sessions-config">
	   <available file="${config.dir}/sessions.yml" property="session.config.exists"/>
	        <if>
	        <equals arg1="${session.config.exists}" arg2="true"/>
	            <then>
	                <echo>${config.dir}/sessions.yml exists</echo>
	            </then>
	            <else>
	                <copy file="${config.dir}/DEFAULT-sessions.yml" tofile="${config.dir}/sessions.yml"/>
	            </else>
	        </if>
	    </target>
	<target name="generate-config-mysql">
		<phingCall target="generate-config-file">
			<param name="type" value="mysql" />
			<param name="name" value="mysql" />
			<param name="testing.url" value="${testing.url}" />
		</phingCall>
	</target>
	<target name="generate-config-postgres">
		<phingCall target="generate-config-file">
			<param name="type" value="pgsql" />
			<param name="name" value="postgres" />
			<param name="testing.url" value="${testing.url}" />
		</phingCall>
	</target>
	<target name="generate-config-sqlite">
		<phingCall target="generate-config-file">
			<param name="type" value="sqlite" />
			<param name="name" value="sqlite" />
			<param name="file.based" value="1" />
			<param name="testing.url" value="${testing.url}" />
		</phingCall>
	</target>
	<target name="generate-config-file">

		<if>
			<equals arg1="${file.based}" arg2="1" />
			<then>
				<input propertyname="file" message="[${name}] Please provide which database-file should be used" promptChar=":" defaultValue="" />
				<property name="database" value="" />
				<property name="host" value="" />
				<property name="user" value="" />
				<property name="password" value="" />
			</then>

			<else>
				<input propertyname="host" message="[${name}] Please provide which host should be used" promptChar=":" defaultValue="localhost" />
				<property name="file" value="" />
				<input propertyname="database" message="[${name}] Please provide which database should be used" promptChar=":" defaultValue="framework_tests" />
				<input propertyname="user" message="[${name}] Please provide which user should be used" promptChar=":" defaultValue="akelos" />
				<input propertyname="password" message="[${name}] Please provide which password should be used" promptChar=":" />
			</else>
		</if>


		<copy file="${config.dir}/TPL-config-testing.php" tofile="${config.dir}/${name}-testing.php" overwrite="true">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
	</target>
	<target name="generate-fix-htaccess">
		<ci-rewrite-url url="${testing.url}" property="rewrite.url"/>
	        <copy file="${config.dir}/TPL-fix_htaccess.php" tofile="${config.dir}/fix_htaccess.php" overwrite="true">
	            <filterchain>
	                <expandproperties />
	            </filterchain>
	        </copy>
	    </target>
	<target name="generate-yaml-config-file">

		<input propertyname="php5" message="Please provide the path to the php5 executable" promptChar=":" defaultValue="/usr/bin/php5" />
		<input propertyname="php4" message="Please provide the path to the php4 executable" promptChar=":" defaultValue="/usr/bin/php4" />


		<copy file="${config.dir}/TPL-ci-config.yaml" tofile="${config.dir}/ci-config.yaml" overwrite="true">
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
	</target>
	<target name="prepare">

		<mkdir dir="${report.dir}" />
		<mkdir dir="${test.dir}" />
	</target>

	<target name="build" depends="taskdef,check-config,run-tests">
	</target>



</project>
