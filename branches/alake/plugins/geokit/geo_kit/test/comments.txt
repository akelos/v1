My goal in translating GeoKit from Ruby to PHP is to make my code pass the same tests that the Ruby version passed.  Where I have thought that I could not or should not do this, I have documented the fact in this document so that my judgment might be questioned.  I've written line numbers, but they may be a bit off by code added during testing.

Script: mappable.php, Class: GeoLoc

In the Ruby version, a test assigns a string to the class variable $this->full_address.  This appears to be a bug,because it allows a data conflict between the contents of $this->full_address and its component parts: $this->street_address, $this->city, $this->state, $this->zip and $this->country.  To deal with this, I made$this->full_address private, then wrote a new function: GeoLoc::set_full_address() at line 525.  The test executes this instead of assigning a value to $this->full_address.  The function parses the parts of the full address parameter,assigns the parts to the individual fields, then uses the existing GeoLoc::to_geocodable_s() function to create $this->full_address.  If the parameter has 5 parts, it is assumed to have a street address; otherwise not.
Here is the caveat that may need to be addressed: It assumes that the parameter contains at least a city, state,zip and country.  If it doesn't, data may get   assigned to the wrong fields.  We could check for fewer than 4 parts in the parameter, but then we'd have to make assumptions as to what those parts contain.
We could also, of course, require that an associative array be used.

Script: base_geocoder_test.php, function test_timeout_call_web_service()

The Ruby code appears to replace a function (do_get) in geocoders.php with code that causes a sleep for 2 seconds.  As such, the test does no more than to test that the sleep triggers the Ruby exception mechanism, not whether a slow response triggers a genuine http timeout.  
In the PHP version of geocoders.php, we did confirm that a specified timeout was being passed to AkHttpClient.  To test for a timeout, I'd have had to find (or create) a site that was consistently slow.  Because a timeout is just one condition that can cause an unsuccessful call to a web service, even though it is the most likely one to occur, I think that we have a valid test when we change the function to test_unsuccessful_call_web_service() and try to get a non-existent page.

Script: base_geocoder_test.php, function test_find_geocoder_methods()

The Ruby code dynamically generates functions in Geocoder that calls a geocode() method in each of its children.  This test is designed to make sure that those methods have been generated.
I have decided to hard code the functions in the PHP version.  Therefore, there is no need for a test to determine if the function exists.  Neither is there a need for the function in the Geocoder class to generate the functions.  I'm leaving the test in place for those who would compare the Ruby and PHP versions.

Scripts: ca_geocoder_test.php, google_geocoder_test.php

I, frankly, couldn't really understand just how the Ruby code was supposed to work, but I do understand what needs to be tested, so I wrote test functions for that.

Script: ca_geocoder_test.php, test_geocoder_with_geo_loc()

This test gets the latitude and longitude using the address, then does a reverse lookup to gat the address from the latitude and longitude.  The input address needs to be same as the output address.  The input address is a GeoLoc.  The Ruby test had a ca_geocoder account.  I don't think that this proves anything, so my test does not.

Script: ca_geocoder_test.php, test_service_unavailable()

I eliminated this test, replacing it with test_lookup_failure().  I modified $ca_geocoder->do_geocode() to examine the latitude and longitude returned by the call.  If, for any reason, the absolute values are zero, the success property of the returned GeoLoc is false.  The test processes a valid address that is outside the U.S. or Canada.

Script google_geocoder_test.php

The Google result format is different from that expected by the Ruby code.  In fact, the Ruby version will work with America and Canada, but not with Finland.  I've changed the Google code in geocoders.php to process that which is returned, regardless of format.  I see no real point in doing what the Ruby programmers did in comparing the response body to constants because the constants will have to be changed to accomodate Google format changes.  The important thing is that the response provides the information that we need, which it does.

Script: google_geocoder_test.php, test_service_unavailable()

I eliminated this test, replacing it with test_lookup_failure().  The test processes an address that is valid, except that it is in the wrong country.  I modified $google_geocoder->do_geocode() to examine the latitude and longitude returned by the call.  If, for any reason, the absolute values are zero, the success property of the returned GeoLoc is false.

Script: ipgeocoder_test.php, test_unicoded_lookup()

This test is to determine whether a lookup that returns a city with a unicoded character works correctly.  Short story.  It doesn't.  "call_geocoder_service()" in geocoders.php uses an instance of AkHttpClient, $http.  The code is "$body = $http->get($url, $options);" at line 140.  $body contains a city with an "å" character, but it is not rendered as a unicode character.  I don't know what to do about it. Ticket #236 requests a fix.
I might also note that the ip address in the Ruby version is the same U.S. ip address used in the previous test, test_successful_lookup().  I had to find a city name that contained a unicode character.
I think that we need to modify AkHttpClient so that a result is returned in utf-8 code.  We also need to make a note in the README for this plugin that, if this feature of the plugin is used in a production environment, it might be well to modify it to use a non-free lookup service instead of hostip.info.

Script: us_geocoder_test.php, test_service_unavailable()

I eliminated this test, replacing it with test_lookup_failure().  I modified $google_geocoder->do_geocode() to examine the latitude and longitude returned by the call.  If, for any reason, the absolute values are zero, the success property of the returned GeoLoc is false.  The test processes an address that is valid, except that it is in the wrong state.

Script: yahoo_geocoder_test.php, test_service_unavailable()

I eliminated this test, replacing it with test_lookup_failure().  The test processes an address that is valid, except that it is in the wrong country.  I modified $yahoo_geocoder->do_geocode() to examine the latitude and longitude returned by the call.  If, for any reason, the absolute values are zero, the success property of the returned GeoLoc is false.  Yahoo tried to guess the bad address (Kalervonkatu 3, Jyväskylä, US) and returned as successful Skyline, AL, US.  It also gave a warning that the street could not be found.  I tested for the presence of a warning and returned the data that Yahoo "found", but with success = false.  GeoLoc doesn't have a field to store the warning.  We'll have to decided whether we wish to have one.

Script: multi_geocoder_test.php, test_double_failover()

The Ruby script uses the string 'San Francisco, CA' as input.  The 3rd geocoder that the Ruby script calls for is the UsGeocoder.  This geocoder won't process a partial address, which makes me think that the Ruby programmers must have fudged a bit.  I changed the third geocoder to the CaGeocoder, but it requires a GeoLoc input.  The other two will accept a GeoLoc input, so that's what I'm using for this test.

Script: multi_geocoder_test.php, test_failure() and test_invalid_provider()

These scripts, like the test_double_failover() script use a GeoLoc input instead of a string.


